{
 "cells": [
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 4,
=======
   "execution_count": 1,
>>>>>>> b4c5de8cb4c79e8991479d5cd1e96ab345572f78
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 5,
=======
   "execution_count": 2,
>>>>>>> b4c5de8cb4c79e8991479d5cd1e96ab345572f78
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Challenge 1\n",
    "\n",
    "# read in the data:\n",
    "import pandas as pd\n",
    "df_1 = pd.read_csv('data files/turnstile_190706.txt')\n",
    "df_2 = pd.read_csv('data files/turnstile_190713.txt')\n",
    "df_3 = pd.read_csv('data files/turnstile_190720.txt')\n",
    "df_4 = pd.read_csv('data files/turnstile_190727.txt')\n",
    "df_5 = pd.read_csv('data files/turnstile_190803.txt')\n",
    "df_6 = pd.read_csv('data files/turnstile_190810.txt')\n",
    "df_7 = pd.read_csv('data files/turnstile_190817.txt')\n",
    "df_8 = pd.read_csv('data files/turnstile_190824.txt')\n",
    "df_9 = pd.read_csv('data files/turnstile_190831.txt')\n",
    "\n",
    "#concatenate\n",
    "df_combined = pd.concat([df_1, df_2, df_3, df_4, df_5, df_6, df_7, df_8, df_9])"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 6,
=======
   "execution_count": 3,
>>>>>>> b4c5de8cb4c79e8991479d5cd1e96ab345572f78
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['C/A', 'UNIT', 'SCP', 'STATION', 'LINENAME', 'DIVISION', 'DATE', 'TIME',\n",
      "       'DESC', 'ENTRIES',\n",
      "       'EXITS                                                               '],\n",
      "      dtype='object')\n",
      "Index(['C/A', 'UNIT', 'SCP', 'STATION', 'LINENAME', 'DIVISION', 'DATE', 'TIME',\n",
      "       'DESC', 'ENTRIES', 'EXITS'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# Column name 'EXITS' needs to be formatted to remove extra spaces\n",
    "print(df_combined.columns)\n",
    "df_combined.rename(columns={df_combined.columns[10]:'EXITS'}, inplace=True)\n",
    "print(df_combined.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'str'> <class 'str'>\n",
      "    C/A  UNIT       SCP STATION LINENAME DIVISION        DATE      TIME  \\\n",
      "0  A002  R051  02-00-00   59 ST  NQR456W      BMT  06/29/2019  00:00:00   \n",
      "1  A002  R051  02-00-00   59 ST  NQR456W      BMT  06/29/2019  08:00:00   \n",
      "2  A002  R051  02-00-00   59 ST  NQR456W      BMT  06/29/2019  12:00:00   \n",
      "3  A002  R051  02-00-00   59 ST  NQR456W      BMT  06/29/2019  16:00:00   \n",
      "4  A002  R051  02-00-00   59 ST  NQR456W      BMT  06/29/2019  20:00:00   \n",
      "\n",
      "      DESC  ENTRIES    EXITS            DATETIME  \n",
      "0  REGULAR  7116734  2410183 2019-06-29 00:00:00  \n",
      "1  REGULAR  7116770  2410218 2019-06-29 08:00:00  \n",
      "2  REGULAR  7116856  2410288 2019-06-29 12:00:00  \n",
      "3  REGULAR  7117076  2410346 2019-06-29 16:00:00  \n",
      "4  REGULAR  7117340  2410387 2019-06-29 20:00:00  \n"
     ]
    }
   ],
   "source": [
    "# Challenge 2\n",
    "\n",
    "# What data type did pandas assign values in columns 'Date' and 'Time'?\n",
    "print(type(df_combined.DATE.iloc[0]), type(df_combined.TIME.iloc[0]))\n",
    "\n",
    "# Combine 'Date' and 'Time' columns and format into a datetime object\n",
    "df_combined['DATETIME'] = pd.to_datetime(df_combined['DATE']+ ' ' + df_combined['TIME'])\n",
    "#df_combined.drop(columns=['DATE','TIME'], inplace=True, axis=1)\n",
    "print(df_combined.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Challenge 3\n",
    "\n",
    "Each row is a turnstile, identified by a combination of the C/A, UNIT, SCP, and STATION columns, with information on entries and exits at that turnstile every n hours. (What is n?) We want total daily entries.\n",
    "Group the data so that it represents daily entries for each turnstile (hint: pd.groupby or DataFrame.groupby)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 7,
=======
   "execution_count": 5,
>>>>>>> b4c5de8cb4c79e8991479d5cd1e96ab345572f78
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C/A</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>SCP</th>\n",
       "      <th>STATION</th>\n",
       "      <th>LINENAME</th>\n",
       "      <th>DIVISION</th>\n",
       "      <th>DATE</th>\n",
       "      <th>TIME</th>\n",
       "      <th>DESC</th>\n",
       "      <th>ENTRIES</th>\n",
       "      <th>EXITS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>06/29/2019</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>7116734</td>\n",
       "      <td>2410183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>06/29/2019</td>\n",
       "      <td>08:00:00</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>7116770</td>\n",
       "      <td>2410218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>06/29/2019</td>\n",
       "      <td>12:00:00</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>7116856</td>\n",
       "      <td>2410288</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>06/29/2019</td>\n",
       "      <td>16:00:00</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>7117076</td>\n",
       "      <td>2410346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>06/29/2019</td>\n",
       "      <td>20:00:00</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>7117340</td>\n",
       "      <td>2410387</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    C/A  UNIT       SCP STATION LINENAME DIVISION        DATE      TIME  \\\n",
       "0  A002  R051  02-00-00   59 ST  NQR456W      BMT  06/29/2019  00:00:00   \n",
       "1  A002  R051  02-00-00   59 ST  NQR456W      BMT  06/29/2019  08:00:00   \n",
       "2  A002  R051  02-00-00   59 ST  NQR456W      BMT  06/29/2019  12:00:00   \n",
       "3  A002  R051  02-00-00   59 ST  NQR456W      BMT  06/29/2019  16:00:00   \n",
       "4  A002  R051  02-00-00   59 ST  NQR456W      BMT  06/29/2019  20:00:00   \n",
       "\n",
       "      DESC  ENTRIES    EXITS  \n",
       "0  REGULAR  7116734  2410183  \n",
       "1  REGULAR  7116770  2410218  \n",
       "2  REGULAR  7116856  2410288  \n",
       "3  REGULAR  7117076  2410346  \n",
       "4  REGULAR  7117340  2410387  "
      ]
     },
<<<<<<< HEAD
     "execution_count": 7,
=======
     "execution_count": 5,
>>>>>>> b4c5de8cb4c79e8991479d5cd1e96ab345572f78
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_combined.head()"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 8,
=======
   "execution_count": 6,
>>>>>>> b4c5de8cb4c79e8991479d5cd1e96ab345572f78
   "metadata": {},
   "outputs": [],
   "source": [
    "# group by turnstile and date, take the first value for each day\n",
    "turnstiles_daily = (df_combined\n",
    "                        .groupby([\"C/A\", \"UNIT\", \"SCP\", \"STATION\", \"DATE\"],as_index=False)\n",
    "                        .ENTRIES.first())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C/A</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>SCP</th>\n",
       "      <th>STATION</th>\n",
       "      <th>DATE</th>\n",
       "      <th>ENTRIES</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>06/29/2019</td>\n",
       "      <td>7116734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>06/30/2019</td>\n",
       "      <td>7117480</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>07/01/2019</td>\n",
       "      <td>7118119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>07/02/2019</td>\n",
       "      <td>7119610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>07/03/2019</td>\n",
       "      <td>7121181</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    C/A  UNIT       SCP STATION        DATE  ENTRIES\n",
       "0  A002  R051  02-00-00   59 ST  06/29/2019  7116734\n",
       "1  A002  R051  02-00-00   59 ST  06/30/2019  7117480\n",
       "2  A002  R051  02-00-00   59 ST  07/01/2019  7118119\n",
       "3  A002  R051  02-00-00   59 ST  07/02/2019  7119610\n",
       "4  A002  R051  02-00-00   59 ST  07/03/2019  7121181"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "turnstiles_daily.head()"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 9,
=======
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['C/A', 'UNIT', 'SCP', 'STATION', 'DATE', 'ENTRIES', 'PREV_DATE',\n",
       "       'PREV_ENTRIES', 'DAILY_ENTRIES'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "turnstiles_daily.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
>>>>>>> b4c5de8cb4c79e8991479d5cd1e96ab345572f78
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
<<<<<<< HEAD
      "<ipython-input-9-3a945374269e>:1: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
=======
      "<ipython-input-24-3a945374269e>:1: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
>>>>>>> b4c5de8cb4c79e8991479d5cd1e96ab345572f78
      "  turnstiles_daily[[\"PREV_DATE\", \"PREV_ENTRIES\"]] = (turnstiles_daily\n"
     ]
    }
   ],
   "source": [
    "turnstiles_daily[[\"PREV_DATE\", \"PREV_ENTRIES\"]] = (turnstiles_daily\n",
    "                                                       .groupby([\"C/A\", \"UNIT\", \"SCP\", \"STATION\"])[\"DATE\", \"ENTRIES\"]\n",
    "                                                       .apply(lambda grp: grp.shift(1)))"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 10,
=======
   "execution_count": 9,
>>>>>>> b4c5de8cb4c79e8991479d5cd1e96ab345572f78
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C/A</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>SCP</th>\n",
       "      <th>STATION</th>\n",
       "      <th>DATE</th>\n",
       "      <th>ENTRIES</th>\n",
       "      <th>PREV_DATE</th>\n",
       "      <th>PREV_ENTRIES</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>06/29/2019</td>\n",
       "      <td>7116734</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>06/30/2019</td>\n",
       "      <td>7117480</td>\n",
       "      <td>06/29/2019</td>\n",
       "      <td>7116734.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>07/01/2019</td>\n",
       "      <td>7118119</td>\n",
       "      <td>06/30/2019</td>\n",
       "      <td>7117480.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>07/02/2019</td>\n",
       "      <td>7119610</td>\n",
       "      <td>07/01/2019</td>\n",
       "      <td>7118119.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>07/03/2019</td>\n",
       "      <td>7121181</td>\n",
       "      <td>07/02/2019</td>\n",
       "      <td>7119610.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    C/A  UNIT       SCP STATION        DATE  ENTRIES   PREV_DATE  PREV_ENTRIES\n",
       "0  A002  R051  02-00-00   59 ST  06/29/2019  7116734         NaN           NaN\n",
       "1  A002  R051  02-00-00   59 ST  06/30/2019  7117480  06/29/2019     7116734.0\n",
       "2  A002  R051  02-00-00   59 ST  07/01/2019  7118119  06/30/2019     7117480.0\n",
       "3  A002  R051  02-00-00   59 ST  07/02/2019  7119610  07/01/2019     7118119.0\n",
       "4  A002  R051  02-00-00   59 ST  07/03/2019  7121181  07/02/2019     7119610.0"
      ]
     },
<<<<<<< HEAD
     "execution_count": 10,
=======
     "execution_count": 9,
>>>>>>> b4c5de8cb4c79e8991479d5cd1e96ab345572f78
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "turnstiles_daily.head()"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 11,
=======
   "execution_count": 10,
>>>>>>> b4c5de8cb4c79e8991479d5cd1e96ab345572f78
   "metadata": {},
   "outputs": [],
   "source": [
    "# remove NaN\n",
    "turnstiles_daily.dropna(subset=['PREV_DATE'],axis=0,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 12,
=======
   "execution_count": 11,
>>>>>>> b4c5de8cb4c79e8991479d5cd1e96ab345572f78
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C/A</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>SCP</th>\n",
       "      <th>STATION</th>\n",
       "      <th>DATE</th>\n",
       "      <th>ENTRIES</th>\n",
       "      <th>PREV_DATE</th>\n",
       "      <th>PREV_ENTRIES</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>06/30/2019</td>\n",
       "      <td>7117480</td>\n",
       "      <td>06/29/2019</td>\n",
       "      <td>7116734.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>07/01/2019</td>\n",
       "      <td>7118119</td>\n",
       "      <td>06/30/2019</td>\n",
       "      <td>7117480.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>07/02/2019</td>\n",
       "      <td>7119610</td>\n",
       "      <td>07/01/2019</td>\n",
       "      <td>7118119.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>07/03/2019</td>\n",
       "      <td>7121181</td>\n",
       "      <td>07/02/2019</td>\n",
       "      <td>7119610.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>07/04/2019</td>\n",
       "      <td>7122652</td>\n",
       "      <td>07/03/2019</td>\n",
       "      <td>7121181.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    C/A  UNIT       SCP STATION        DATE  ENTRIES   PREV_DATE  PREV_ENTRIES\n",
       "1  A002  R051  02-00-00   59 ST  06/30/2019  7117480  06/29/2019     7116734.0\n",
       "2  A002  R051  02-00-00   59 ST  07/01/2019  7118119  06/30/2019     7117480.0\n",
       "3  A002  R051  02-00-00   59 ST  07/02/2019  7119610  07/01/2019     7118119.0\n",
       "4  A002  R051  02-00-00   59 ST  07/03/2019  7121181  07/02/2019     7119610.0\n",
       "5  A002  R051  02-00-00   59 ST  07/04/2019  7122652  07/03/2019     7121181.0"
      ]
     },
<<<<<<< HEAD
     "execution_count": 12,
=======
     "execution_count": 11,
>>>>>>> b4c5de8cb4c79e8991479d5cd1e96ab345572f78
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "turnstiles_daily.head()"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Grouper and axis must be same length",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-20-aec0890a2e95>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# check which stations have turnstiles with fewer entries than the previous day\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m check_entries_index = (turnstiles_daily[turnstiles_daily[\"ENTRIES\"] < turnstiles_daily[\"PREV_ENTRIES\"]]\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"C/A\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"UNIT\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"SCP\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"STATION\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     .size())\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mgroupby\u001b[0;34m(self, by, axis, level, as_index, sort, group_keys, squeeze, observed)\u001b[0m\n\u001b[1;32m   5799\u001b[0m         \u001b[0maxis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis_number\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5800\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5801\u001b[0;31m         return groupby_generic.DataFrameGroupBy(\n\u001b[0m\u001b[1;32m   5802\u001b[0m             \u001b[0mobj\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5803\u001b[0m             \u001b[0mkeys\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mby\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, obj, keys, axis, level, grouper, exclusions, selection, as_index, sort, group_keys, squeeze, observed, mutated)\u001b[0m\n\u001b[1;32m    401\u001b[0m             \u001b[0;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgrouper\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mget_grouper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    402\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 403\u001b[0;31m             grouper, exclusions, obj = get_grouper(\n\u001b[0m\u001b[1;32m    404\u001b[0m                 \u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    405\u001b[0m                 \u001b[0mkeys\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/groupby/grouper.py\u001b[0m in \u001b[0;36mget_grouper\u001b[0;34m(obj, key, axis, level, sort, observed, mutated, validate)\u001b[0m\n\u001b[1;32m    615\u001b[0m         \u001b[0;31m# allow us to passing the actual Grouping as the gpr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    616\u001b[0m         ping = (\n\u001b[0;32m--> 617\u001b[0;31m             Grouping(\n\u001b[0m\u001b[1;32m    618\u001b[0m                 \u001b[0mgroup_axis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m                 \u001b[0mgpr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/groupby/grouper.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, index, grouper, obj, name, level, sort, observed, in_axis)\u001b[0m\n\u001b[1;32m    254\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    255\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlevel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 256\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgrouper\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_convert_grouper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrouper\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    257\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mall_grouper\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    258\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/groupby/grouper.py\u001b[0m in \u001b[0;36m_convert_grouper\u001b[0;34m(axis, grouper)\u001b[0m\n\u001b[1;32m    655\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrouper\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSeries\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    656\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrouper\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 657\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Grouper and axis must be same length\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    658\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mgrouper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    659\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Grouper and axis must be same length"
     ]
    }
   ],
   "source": [
    "# check which stations have turnstiles with fewer entries than the previous day\n",
    "check_entries_index = (turnstiles_daily[turnstiles_daily[\"ENTRIES\"] < turnstiles_daily[\"PREV_ENTRIES\"]]\n",
    "    .groupby([[0],\"C/A\", \"UNIT\", \"SCP\", \"STATION\"])\n",
    "    .size())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
=======
   "execution_count": 12,
>>>>>>> b4c5de8cb4c79e8991479d5cd1e96ab345572f78
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "C/A   UNIT  SCP       STATION        \n",
       "A002  R051  02-06-00  59 ST               1\n",
       "A007  R079  01-05-01  5 AV/59 ST          1\n",
       "A011  R080  01-03-00  57 ST-7 AV         10\n",
       "A025  R023  01-03-01  34 ST-HERALD SQ    62\n",
       "A035  R170  00-00-01  14 ST-UNION SQ      1\n",
       "dtype: int64"
      ]
     },
<<<<<<< HEAD
     "execution_count": 16,
=======
     "execution_count": 12,
>>>>>>> b4c5de8cb4c79e8991479d5cd1e96ab345572f78
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "check_entries_index.head()"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 14,
=======
   "execution_count": 13,
>>>>>>> b4c5de8cb4c79e8991479d5cd1e96ab345572f78
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "679 258249.0\n",
      "458755 7.0\n",
      "451 303204.0\n",
      "824 3557655.0\n",
      "458818 12876202.0\n",
      "722868 458818.0\n",
      "15 839675.0\n",
      "459073 68448066.0\n",
      "85 644569.0\n",
      "2000091722 6897017.0\n",
      "1638739 805417.0\n",
      "138 290539.0\n",
      "11 2029641496.0\n",
      "342 245911.0\n",
      "7 2997591.0\n",
      "5327464 4320256.0\n",
      "2997591 2487626.0\n",
      "4320257 2920966.0\n",
      "458754 3774.0\n",
      "721 915984.0\n",
      "10 139247.0\n",
      "319 5420925.0\n",
      "128 148717.0\n",
      "73 137796.0\n",
      "721090 5343128.0\n",
      "262 3407291.0\n",
      "26 1652502.0\n",
      "422 17135909.0\n",
      "22 2129136933.0\n",
      "21 13593836.0\n",
      "27 7808518.0\n",
      "1462 989392.0\n",
      "304 4587522.0\n",
      "1962917508 9137626.0\n",
      "393224 117441229.0\n",
      "23 2130567.0\n",
      "352361657 1409610.0\n",
      "524292 3878.0\n",
      "80 3260287.0\n",
      "55 211928.0\n",
      "134 3376441.0\n",
      "351 3839369.0\n",
      "142 155072.0\n",
      "1487 4721413.0\n",
      "983271 3670866.0\n",
      "171 1788082.0\n",
      "1325342695 11664583.0\n",
      "458755 7537.0\n",
      "2054 159430.0\n",
      "491 215248.0\n",
      "528 102688.0\n",
      "105 7542484.0\n",
      "46 167729.0\n",
      "458765 6627959.0\n",
      "354 5366386.0\n",
      "524295 2338090.0\n",
      "1359886 4065.0\n",
      "292 372401.0\n",
      "70 5631392.0\n",
      "871 2543403.0\n",
      "468 620636.0\n",
      "892 1975856.0\n",
      "37 1514083866.0\n",
      "34 12122524.0\n",
      "25 1229078732.0\n",
      "438 205932.0\n",
      "106 392314.0\n",
      "1572864 2139.0\n",
      "910 259843.0\n",
      "1233 4018083.0\n",
      "214 9789350.0\n",
      "589826 272226.0\n",
      "7 1370664.0\n",
      "458752 0.0\n",
      "2162762 33622258.0\n",
      "458755 0.0\n",
      "6 545478.0\n",
      "708 172490.0\n",
      "1846 299266.0\n",
      "458854 1256926.0\n",
      "592416496 389431.0\n",
      "6 5705107.0\n",
      "458945 904.0\n",
      "65540 459479.0\n",
      "459355 68844.0\n",
      "65707 459355.0\n",
      "458762 65707.0\n",
      "1245 460155.0\n",
      "459479 6.0\n",
      "2160 392982.0\n",
      "933 1285128.0\n",
      "1792 6138105.0\n",
      "1543 10213611.0\n",
      "18806 654821321.0\n",
      "0 139689.0\n",
      "163997279 972453993.0\n",
      "437 36992180.0\n",
      "78260066 1442544807.0\n",
      "1862330382 7277226.0\n",
      "1 117208.0\n",
      "33754095 50516744.0\n",
      "50474287 33772995.0\n",
      "1594421086 140471461.0\n",
      "930 1108422349.0\n",
      "181 18340503.0\n",
      "109924748 1928952716.0\n",
      "98096722 670717696.0\n",
      "2046764758 8810196.0\n",
      "1124011327 12446364.0\n",
      "439 271606.0\n",
      "255 497006.0\n",
      "3 399489.0\n",
      "110 6409107.0\n",
      "200 113956.0\n"
     ]
    }
   ],
   "source": [
    "# If the counter is reversed, make negative values positive\n",
    "# If difference between days is >= 1 million, set daily entries to min value between entries and prev_ent\n",
    "def get_daily_counts(row, max_counter):\n",
    "    counter = row[\"ENTRIES\"] - row[\"PREV_ENTRIES\"]\n",
    "    if counter < 0:\n",
    "        # Maybe counter is reversed?\n",
    "        counter = -counter\n",
    "    if counter > max_counter:\n",
    "        # Maybe counter was reset to 0? \n",
    "        print(row[\"ENTRIES\"], row[\"PREV_ENTRIES\"])\n",
    "        counter = 0\n",
    "    if counter > max_counter:\n",
    "        # Check it again to make sure we're not still giving a counter that's too big\n",
    "        return 0\n",
    "    return counter\n",
    "\n",
    "# If counter is > 1Million, then the counter might have been reset.  \n",
    "# Just set it to zero as different counters have different cycle limits\n",
    "# It'd probably be a good idea to use a number even significantly smaller than 1 million as the limit!\n",
    "turnstiles_daily[\"DAILY_ENTRIES\"] = turnstiles_daily.apply(get_daily_counts, axis=1, max_counter=100000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "mask = (turnstiles_daily[\"DAILY_ENTRIES\"] != 0)\n",
    "turnstiles_daily = turnstiles_daily[mask]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C/A</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>SCP</th>\n",
       "      <th>STATION</th>\n",
       "      <th>DATE</th>\n",
       "      <th>ENTRIES</th>\n",
       "      <th>PREV_DATE</th>\n",
       "      <th>PREV_ENTRIES</th>\n",
       "      <th>DAILY_ENTRIES</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>06/30/2019</td>\n",
       "      <td>7117480</td>\n",
       "      <td>06/29/2019</td>\n",
       "      <td>7116734.0</td>\n",
       "      <td>746.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>07/01/2019</td>\n",
       "      <td>7118119</td>\n",
       "      <td>06/30/2019</td>\n",
       "      <td>7117480.0</td>\n",
       "      <td>639.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>07/02/2019</td>\n",
       "      <td>7119610</td>\n",
       "      <td>07/01/2019</td>\n",
       "      <td>7118119.0</td>\n",
       "      <td>1491.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>07/03/2019</td>\n",
       "      <td>7121181</td>\n",
       "      <td>07/02/2019</td>\n",
       "      <td>7119610.0</td>\n",
       "      <td>1571.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>07/04/2019</td>\n",
       "      <td>7122652</td>\n",
       "      <td>07/03/2019</td>\n",
       "      <td>7121181.0</td>\n",
       "      <td>1471.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307521</th>\n",
       "      <td>TRAM2</td>\n",
       "      <td>R469</td>\n",
       "      <td>00-05-00</td>\n",
       "      <td>RIT-ROOSEVELT</td>\n",
       "      <td>08/24/2019</td>\n",
       "      <td>2945</td>\n",
       "      <td>08/23/2019</td>\n",
       "      <td>2944.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307522</th>\n",
       "      <td>TRAM2</td>\n",
       "      <td>R469</td>\n",
       "      <td>00-05-00</td>\n",
       "      <td>RIT-ROOSEVELT</td>\n",
       "      <td>08/25/2019</td>\n",
       "      <td>2946</td>\n",
       "      <td>08/24/2019</td>\n",
       "      <td>2945.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307523</th>\n",
       "      <td>TRAM2</td>\n",
       "      <td>R469</td>\n",
       "      <td>00-05-00</td>\n",
       "      <td>RIT-ROOSEVELT</td>\n",
       "      <td>08/26/2019</td>\n",
       "      <td>2948</td>\n",
       "      <td>08/25/2019</td>\n",
       "      <td>2946.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307526</th>\n",
       "      <td>TRAM2</td>\n",
       "      <td>R469</td>\n",
       "      <td>00-05-00</td>\n",
       "      <td>RIT-ROOSEVELT</td>\n",
       "      <td>08/29/2019</td>\n",
       "      <td>2954</td>\n",
       "      <td>08/28/2019</td>\n",
       "      <td>2948.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307527</th>\n",
       "      <td>TRAM2</td>\n",
       "      <td>R469</td>\n",
       "      <td>00-05-00</td>\n",
       "      <td>RIT-ROOSEVELT</td>\n",
       "      <td>08/30/2019</td>\n",
       "      <td>2956</td>\n",
       "      <td>08/29/2019</td>\n",
       "      <td>2954.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>269966 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          C/A  UNIT       SCP        STATION        DATE  ENTRIES   PREV_DATE  \\\n",
       "1        A002  R051  02-00-00          59 ST  06/30/2019  7117480  06/29/2019   \n",
       "2        A002  R051  02-00-00          59 ST  07/01/2019  7118119  06/30/2019   \n",
       "3        A002  R051  02-00-00          59 ST  07/02/2019  7119610  07/01/2019   \n",
       "4        A002  R051  02-00-00          59 ST  07/03/2019  7121181  07/02/2019   \n",
       "5        A002  R051  02-00-00          59 ST  07/04/2019  7122652  07/03/2019   \n",
       "...       ...   ...       ...            ...         ...      ...         ...   \n",
       "307521  TRAM2  R469  00-05-00  RIT-ROOSEVELT  08/24/2019     2945  08/23/2019   \n",
       "307522  TRAM2  R469  00-05-00  RIT-ROOSEVELT  08/25/2019     2946  08/24/2019   \n",
       "307523  TRAM2  R469  00-05-00  RIT-ROOSEVELT  08/26/2019     2948  08/25/2019   \n",
       "307526  TRAM2  R469  00-05-00  RIT-ROOSEVELT  08/29/2019     2954  08/28/2019   \n",
       "307527  TRAM2  R469  00-05-00  RIT-ROOSEVELT  08/30/2019     2956  08/29/2019   \n",
       "\n",
       "        PREV_ENTRIES  DAILY_ENTRIES  \n",
       "1          7116734.0          746.0  \n",
       "2          7117480.0          639.0  \n",
       "3          7118119.0         1491.0  \n",
       "4          7119610.0         1571.0  \n",
       "5          7121181.0         1471.0  \n",
       "...              ...            ...  \n",
       "307521        2944.0            1.0  \n",
       "307522        2945.0            1.0  \n",
       "307523        2946.0            2.0  \n",
       "307526        2948.0            6.0  \n",
       "307527        2954.0            2.0  \n",
       "\n",
       "[269966 rows x 9 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "turnstiles_daily"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ENTRIES</th>\n",
       "      <th>PREV_ENTRIES</th>\n",
       "      <th>DAILY_ENTRIES</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>STATION</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>YORK ST</th>\n",
       "      <td>1.440408e+07</td>\n",
       "      <td>1.440033e+07</td>\n",
       "      <td>3744.134409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MYRTLE AV</th>\n",
       "      <td>1.077464e+07</td>\n",
       "      <td>1.077204e+07</td>\n",
       "      <td>2598.670732</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>QUEENSBORO PLZ</th>\n",
       "      <td>5.107056e+06</td>\n",
       "      <td>5.104783e+06</td>\n",
       "      <td>2273.626344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>JKSN HT-ROOSVLT</th>\n",
       "      <td>5.314900e+06</td>\n",
       "      <td>5.312743e+06</td>\n",
       "      <td>2156.732642</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>W 4 ST-WASH SQ</th>\n",
       "      <td>7.527960e+06</td>\n",
       "      <td>7.525811e+06</td>\n",
       "      <td>2149.617946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E 143/ST MARY'S</th>\n",
       "      <td>9.406565e+05</td>\n",
       "      <td>9.405263e+05</td>\n",
       "      <td>130.153846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TOMPKINSVILLE</th>\n",
       "      <td>3.764417e+05</td>\n",
       "      <td>3.763420e+05</td>\n",
       "      <td>99.657895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BROAD CHANNEL</th>\n",
       "      <td>4.744558e+05</td>\n",
       "      <td>4.743647e+05</td>\n",
       "      <td>91.059140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ORCHARD BEACH</th>\n",
       "      <td>1.796004e+05</td>\n",
       "      <td>1.795354e+05</td>\n",
       "      <td>65.058252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NEWARK HM HE</th>\n",
       "      <td>1.347530e+03</td>\n",
       "      <td>1.330135e+03</td>\n",
       "      <td>36.272289</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>378 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      ENTRIES  PREV_ENTRIES  DAILY_ENTRIES\n",
       "STATION                                                   \n",
       "YORK ST          1.440408e+07  1.440033e+07    3744.134409\n",
       "MYRTLE AV        1.077464e+07  1.077204e+07    2598.670732\n",
       "QUEENSBORO PLZ   5.107056e+06  5.104783e+06    2273.626344\n",
       "JKSN HT-ROOSVLT  5.314900e+06  5.312743e+06    2156.732642\n",
       "W 4 ST-WASH SQ   7.527960e+06  7.525811e+06    2149.617946\n",
       "...                       ...           ...            ...\n",
       "E 143/ST MARY'S  9.406565e+05  9.405263e+05     130.153846\n",
       "TOMPKINSVILLE    3.764417e+05  3.763420e+05      99.657895\n",
       "BROAD CHANNEL    4.744558e+05  4.743647e+05      91.059140\n",
       "ORCHARD BEACH    1.796004e+05  1.795354e+05      65.058252\n",
       "NEWARK HM HE     1.347530e+03  1.330135e+03      36.272289\n",
       "\n",
       "[378 rows x 3 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "turnstiles_daily.groupby(['STATION']).mean().sort_values('DAILY_ENTRIES', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C/A</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>SCP</th>\n",
       "      <th>STATION</th>\n",
       "      <th>DATE</th>\n",
       "      <th>ENTRIES</th>\n",
       "      <th>PREV_DATE</th>\n",
       "      <th>PREV_ENTRIES</th>\n",
       "      <th>DAILY_ENTRIES</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11182</th>\n",
       "      <td>A046</td>\n",
       "      <td>R463</td>\n",
       "      <td>00-06-01</td>\n",
       "      <td>CANAL ST</td>\n",
       "      <td>08/14/2019</td>\n",
       "      <td>12876202</td>\n",
       "      <td>08/13/2019</td>\n",
       "      <td>12873490.0</td>\n",
       "      <td>2712.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        C/A  UNIT       SCP   STATION        DATE   ENTRIES   PREV_DATE  \\\n",
       "11182  A046  R463  00-06-01  CANAL ST  08/14/2019  12876202  08/13/2019   \n",
       "\n",
       "       PREV_ENTRIES  DAILY_ENTRIES  \n",
       "11182    12873490.0         2712.0  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "turnstiles_daily[turnstiles_daily.values == 12876202]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C/A</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>SCP</th>\n",
       "      <th>STATION</th>\n",
       "      <th>DATE</th>\n",
       "      <th>ENTRIES</th>\n",
       "      <th>PREV_DATE</th>\n",
       "      <th>PREV_ENTRIES</th>\n",
       "      <th>DAILY_ENTRIES</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11177</th>\n",
       "      <td>A046</td>\n",
       "      <td>R463</td>\n",
       "      <td>00-06-01</td>\n",
       "      <td>CANAL ST</td>\n",
       "      <td>08/09/2019</td>\n",
       "      <td>12862799</td>\n",
       "      <td>08/08/2019</td>\n",
       "      <td>12859976.0</td>\n",
       "      <td>2823.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11178</th>\n",
       "      <td>A046</td>\n",
       "      <td>R463</td>\n",
       "      <td>00-06-01</td>\n",
       "      <td>CANAL ST</td>\n",
       "      <td>08/10/2019</td>\n",
       "      <td>12865937</td>\n",
       "      <td>08/09/2019</td>\n",
       "      <td>12862799.0</td>\n",
       "      <td>3138.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11179</th>\n",
       "      <td>A046</td>\n",
       "      <td>R463</td>\n",
       "      <td>00-06-01</td>\n",
       "      <td>CANAL ST</td>\n",
       "      <td>08/11/2019</td>\n",
       "      <td>12868628</td>\n",
       "      <td>08/10/2019</td>\n",
       "      <td>12865937.0</td>\n",
       "      <td>2691.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11180</th>\n",
       "      <td>A046</td>\n",
       "      <td>R463</td>\n",
       "      <td>00-06-01</td>\n",
       "      <td>CANAL ST</td>\n",
       "      <td>08/12/2019</td>\n",
       "      <td>12870812</td>\n",
       "      <td>08/11/2019</td>\n",
       "      <td>12868628.0</td>\n",
       "      <td>2184.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11181</th>\n",
       "      <td>A046</td>\n",
       "      <td>R463</td>\n",
       "      <td>00-06-01</td>\n",
       "      <td>CANAL ST</td>\n",
       "      <td>08/13/2019</td>\n",
       "      <td>12873490</td>\n",
       "      <td>08/12/2019</td>\n",
       "      <td>12870812.0</td>\n",
       "      <td>2678.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11182</th>\n",
       "      <td>A046</td>\n",
       "      <td>R463</td>\n",
       "      <td>00-06-01</td>\n",
       "      <td>CANAL ST</td>\n",
       "      <td>08/14/2019</td>\n",
       "      <td>12876202</td>\n",
       "      <td>08/13/2019</td>\n",
       "      <td>12873490.0</td>\n",
       "      <td>2712.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11185</th>\n",
       "      <td>A046</td>\n",
       "      <td>R463</td>\n",
       "      <td>00-06-01</td>\n",
       "      <td>CANAL ST</td>\n",
       "      <td>08/17/2019</td>\n",
       "      <td>725887</td>\n",
       "      <td>08/16/2019</td>\n",
       "      <td>722868.0</td>\n",
       "      <td>3019.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11186</th>\n",
       "      <td>A046</td>\n",
       "      <td>R463</td>\n",
       "      <td>00-06-01</td>\n",
       "      <td>CANAL ST</td>\n",
       "      <td>08/18/2019</td>\n",
       "      <td>728580</td>\n",
       "      <td>08/17/2019</td>\n",
       "      <td>725887.0</td>\n",
       "      <td>2693.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11187</th>\n",
       "      <td>A046</td>\n",
       "      <td>R463</td>\n",
       "      <td>00-06-01</td>\n",
       "      <td>CANAL ST</td>\n",
       "      <td>08/19/2019</td>\n",
       "      <td>730603</td>\n",
       "      <td>08/18/2019</td>\n",
       "      <td>728580.0</td>\n",
       "      <td>2023.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11188</th>\n",
       "      <td>A046</td>\n",
       "      <td>R463</td>\n",
       "      <td>00-06-01</td>\n",
       "      <td>CANAL ST</td>\n",
       "      <td>08/20/2019</td>\n",
       "      <td>733094</td>\n",
       "      <td>08/19/2019</td>\n",
       "      <td>730603.0</td>\n",
       "      <td>2491.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11189</th>\n",
       "      <td>A046</td>\n",
       "      <td>R463</td>\n",
       "      <td>00-06-01</td>\n",
       "      <td>CANAL ST</td>\n",
       "      <td>08/21/2019</td>\n",
       "      <td>735517</td>\n",
       "      <td>08/20/2019</td>\n",
       "      <td>733094.0</td>\n",
       "      <td>2423.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11190</th>\n",
       "      <td>A046</td>\n",
       "      <td>R463</td>\n",
       "      <td>00-06-01</td>\n",
       "      <td>CANAL ST</td>\n",
       "      <td>08/22/2019</td>\n",
       "      <td>738013</td>\n",
       "      <td>08/21/2019</td>\n",
       "      <td>735517.0</td>\n",
       "      <td>2496.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11191</th>\n",
       "      <td>A046</td>\n",
       "      <td>R463</td>\n",
       "      <td>00-06-01</td>\n",
       "      <td>CANAL ST</td>\n",
       "      <td>08/23/2019</td>\n",
       "      <td>740537</td>\n",
       "      <td>08/22/2019</td>\n",
       "      <td>738013.0</td>\n",
       "      <td>2524.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11192</th>\n",
       "      <td>A046</td>\n",
       "      <td>R463</td>\n",
       "      <td>00-06-01</td>\n",
       "      <td>CANAL ST</td>\n",
       "      <td>08/24/2019</td>\n",
       "      <td>743137</td>\n",
       "      <td>08/23/2019</td>\n",
       "      <td>740537.0</td>\n",
       "      <td>2600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11193</th>\n",
       "      <td>A046</td>\n",
       "      <td>R463</td>\n",
       "      <td>00-06-01</td>\n",
       "      <td>CANAL ST</td>\n",
       "      <td>08/25/2019</td>\n",
       "      <td>745582</td>\n",
       "      <td>08/24/2019</td>\n",
       "      <td>743137.0</td>\n",
       "      <td>2445.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11194</th>\n",
       "      <td>A046</td>\n",
       "      <td>R463</td>\n",
       "      <td>00-06-01</td>\n",
       "      <td>CANAL ST</td>\n",
       "      <td>08/26/2019</td>\n",
       "      <td>747666</td>\n",
       "      <td>08/25/2019</td>\n",
       "      <td>745582.0</td>\n",
       "      <td>2084.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11195</th>\n",
       "      <td>A046</td>\n",
       "      <td>R463</td>\n",
       "      <td>00-06-01</td>\n",
       "      <td>CANAL ST</td>\n",
       "      <td>08/27/2019</td>\n",
       "      <td>750167</td>\n",
       "      <td>08/26/2019</td>\n",
       "      <td>747666.0</td>\n",
       "      <td>2501.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11196</th>\n",
       "      <td>A046</td>\n",
       "      <td>R463</td>\n",
       "      <td>00-06-01</td>\n",
       "      <td>CANAL ST</td>\n",
       "      <td>08/28/2019</td>\n",
       "      <td>752761</td>\n",
       "      <td>08/27/2019</td>\n",
       "      <td>750167.0</td>\n",
       "      <td>2594.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11197</th>\n",
       "      <td>A046</td>\n",
       "      <td>R463</td>\n",
       "      <td>00-06-01</td>\n",
       "      <td>CANAL ST</td>\n",
       "      <td>08/29/2019</td>\n",
       "      <td>755207</td>\n",
       "      <td>08/28/2019</td>\n",
       "      <td>752761.0</td>\n",
       "      <td>2446.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11198</th>\n",
       "      <td>A046</td>\n",
       "      <td>R463</td>\n",
       "      <td>00-06-01</td>\n",
       "      <td>CANAL ST</td>\n",
       "      <td>08/30/2019</td>\n",
       "      <td>757780</td>\n",
       "      <td>08/29/2019</td>\n",
       "      <td>755207.0</td>\n",
       "      <td>2573.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        C/A  UNIT       SCP   STATION        DATE   ENTRIES   PREV_DATE  \\\n",
       "11177  A046  R463  00-06-01  CANAL ST  08/09/2019  12862799  08/08/2019   \n",
       "11178  A046  R463  00-06-01  CANAL ST  08/10/2019  12865937  08/09/2019   \n",
       "11179  A046  R463  00-06-01  CANAL ST  08/11/2019  12868628  08/10/2019   \n",
       "11180  A046  R463  00-06-01  CANAL ST  08/12/2019  12870812  08/11/2019   \n",
       "11181  A046  R463  00-06-01  CANAL ST  08/13/2019  12873490  08/12/2019   \n",
       "11182  A046  R463  00-06-01  CANAL ST  08/14/2019  12876202  08/13/2019   \n",
       "11185  A046  R463  00-06-01  CANAL ST  08/17/2019    725887  08/16/2019   \n",
       "11186  A046  R463  00-06-01  CANAL ST  08/18/2019    728580  08/17/2019   \n",
       "11187  A046  R463  00-06-01  CANAL ST  08/19/2019    730603  08/18/2019   \n",
       "11188  A046  R463  00-06-01  CANAL ST  08/20/2019    733094  08/19/2019   \n",
       "11189  A046  R463  00-06-01  CANAL ST  08/21/2019    735517  08/20/2019   \n",
       "11190  A046  R463  00-06-01  CANAL ST  08/22/2019    738013  08/21/2019   \n",
       "11191  A046  R463  00-06-01  CANAL ST  08/23/2019    740537  08/22/2019   \n",
       "11192  A046  R463  00-06-01  CANAL ST  08/24/2019    743137  08/23/2019   \n",
       "11193  A046  R463  00-06-01  CANAL ST  08/25/2019    745582  08/24/2019   \n",
       "11194  A046  R463  00-06-01  CANAL ST  08/26/2019    747666  08/25/2019   \n",
       "11195  A046  R463  00-06-01  CANAL ST  08/27/2019    750167  08/26/2019   \n",
       "11196  A046  R463  00-06-01  CANAL ST  08/28/2019    752761  08/27/2019   \n",
       "11197  A046  R463  00-06-01  CANAL ST  08/29/2019    755207  08/28/2019   \n",
       "11198  A046  R463  00-06-01  CANAL ST  08/30/2019    757780  08/29/2019   \n",
       "\n",
       "       PREV_ENTRIES  DAILY_ENTRIES  \n",
       "11177    12859976.0         2823.0  \n",
       "11178    12862799.0         3138.0  \n",
       "11179    12865937.0         2691.0  \n",
       "11180    12868628.0         2184.0  \n",
       "11181    12870812.0         2678.0  \n",
       "11182    12873490.0         2712.0  \n",
       "11185      722868.0         3019.0  \n",
       "11186      725887.0         2693.0  \n",
       "11187      728580.0         2023.0  \n",
       "11188      730603.0         2491.0  \n",
       "11189      733094.0         2423.0  \n",
       "11190      735517.0         2496.0  \n",
       "11191      738013.0         2524.0  \n",
       "11192      740537.0         2600.0  \n",
       "11193      743137.0         2445.0  \n",
       "11194      745582.0         2084.0  \n",
       "11195      747666.0         2501.0  \n",
       "11196      750167.0         2594.0  \n",
       "11197      752761.0         2446.0  \n",
       "11198      755207.0         2573.0  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mask = ((turnstiles_daily[\"C/A\"] == \"A046\") &\n",
    "        (turnstiles_daily[\"UNIT\"] == \"R463\") & \n",
    "        (turnstiles_daily[\"SCP\"] == \"00-06-01\") & \n",
    "        (turnstiles_daily[\"STATION\"] == \"CANAL ST\"))\n",
    "turnstiles_daily[mask].tail(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "tmp = turnstiles_daily[turnstiles_daily[\"ENTRIES\"] < turnstiles_daily[\"PREV_ENTRIES\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "Can only use .dt accessor with datetimelike values",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-20-7bf55787232e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m# On what day of the week did users rate the most movies?\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mturnstiles_daily\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"dayOfWeek\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mturnstiles_daily\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mDATE\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdayofweek\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[1;34m(self, name)\u001b[0m\n\u001b[0;32m   5268\u001b[0m             \u001b[1;32mor\u001b[0m \u001b[0mname\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_accessors\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5269\u001b[0m         ):\n\u001b[1;32m-> 5270\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   5271\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5272\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\accessor.py\u001b[0m in \u001b[0;36m__get__\u001b[1;34m(self, obj, cls)\u001b[0m\n\u001b[0;32m    185\u001b[0m             \u001b[1;31m# we're accessing the attribute of the class, i.e., Dataset.geo\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    186\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_accessor\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 187\u001b[1;33m         \u001b[0maccessor_obj\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_accessor\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    188\u001b[0m         \u001b[1;31m# Replace the property with the accessor object. Inspired by:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    189\u001b[0m         \u001b[1;31m# http://www.pydanny.com/cached-property.html\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\accessors.py\u001b[0m in \u001b[0;36m__new__\u001b[1;34m(cls, data)\u001b[0m\n\u001b[0;32m    336\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mDatetimeProperties\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0morig\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    337\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 338\u001b[1;33m         \u001b[1;32mraise\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Can only use .dt accessor with datetimelike values\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m: Can only use .dt accessor with datetimelike values"
     ]
    }
   ],
   "source": [
    "# On what day of the week did users rate the most movies?\n",
    "turnstiles_daily[\"dayOfWeek\"] = turnstiles_daily.DATE.dt.dayofweek\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "moviesPerDayRated = turnstiles_daily.groupby(\"dayOfWeek\").Rating.size()\n",
    "print(moviesPerDayRated[moviesPerDayRated==moviesPerDayRated.max()])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>STATION</th>\n",
       "      <th>DATE</th>\n",
       "      <th>DAILY_ENTRIES</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1 AV</td>\n",
       "      <td>06/30/2019</td>\n",
       "      <td>10815.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1 AV</td>\n",
       "      <td>07/01/2019</td>\n",
       "      <td>10852.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1 AV</td>\n",
       "      <td>07/02/2019</td>\n",
       "      <td>16994.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1 AV</td>\n",
       "      <td>07/03/2019</td>\n",
       "      <td>17226.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1 AV</td>\n",
       "      <td>07/04/2019</td>\n",
       "      <td>17614.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  STATION        DATE  DAILY_ENTRIES\n",
       "0    1 AV  06/30/2019        10815.0\n",
       "1    1 AV  07/01/2019        10852.0\n",
       "2    1 AV  07/02/2019        16994.0\n",
       "3    1 AV  07/03/2019        17226.0\n",
       "4    1 AV  07/04/2019        17614.0"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# first get daily entries by station\n",
    "stations_daily = \\\n",
    "(turnstiles_daily.groupby(['STATION','DATE'])['DAILY_ENTRIES'].sum()\n",
    "                 .reset_index())\n",
    "stations_daily.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# then get top 20 stations by daily volume \n",
    "# (sum across all days is a reasonable way to define this)\n",
    "top20_stations = \\\n",
    "    (stations_daily.groupby(['STATION'])['DAILY_ENTRIES'].sum()\n",
    "                   .reset_index()\n",
    "                   .sort_values(by='DAILY_ENTRIES',ascending=False) \n",
    "                   .STATION.head(20))\n",
    "test_df = (stations_daily.groupby(['STATION'])['DAILY_ENTRIES'].sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# find busiest hour within subset of hours (times < 06:00 and times >21:00)\n",
    "\n",
    "# Sum Entries and Exits\n",
    "\n",
    "# Do we still have high negative and positive counts?\n",
    "#   are there ways to clean this data?\n",
    "\n",
    "#\n",
    "#   Step 1 what are the busiest stations?\n",
    "#\n",
    "\n",
    "# group by station, get sum\n",
    "station_df = df_combined.groupby([\"STATION\", \"DATETIME\"]).sum().diff(axis=0).fillna(0)\n",
    "\n",
    "# group by station, get mean\n",
    "station_df = df_combined.groupby([\"STATION\", \"DATETIME\"]).mean().diff(axis=0).fillna(0)\n",
    "\n",
    "# look at SD to understand how variable values are at each station\n",
    "\n",
    "\n",
    "\n",
    "# bar chart - all\n",
    "# bar chart - top ~30?\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#\n",
    "#   Step 2 what stations are most important to the client?\n",
    "#\n",
    "\n",
    "# Census data: residential/ tourist/ income\n",
    "\n",
    "# Visualize relevant neighborhoods with NYC map\n",
    "\n",
    "# bar chart - top ~30 highlight/ gray-out\n",
    "\n",
    "# conclusions about recommended stations for canvasing\n",
    "\n",
    "\n",
    "\n",
    "#\n",
    "#   Step 3 break down stations by busiest hour to refine recommendation about when to canvas\n",
    "#\n",
    "\n",
    "# focus on the short list of prioritized stations\n",
    "\n",
    "# write OR statement to include times in 8a-12p and 9a-1p (8a-1p)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
